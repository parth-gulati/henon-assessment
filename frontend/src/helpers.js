// helpers.js - This file contains utility functions for formatting dates and times.
// It includes functions to format dates for display, convert between 12-hour and 24-hour formats,

// this function takes a date object and a time string in 
// the format "HH:MM" and updates the date object with the specified time.
// It returns the updated date object in ISO format.
export function updateDateTime(dateObj, timeStr) {
    const [hours, minutes] = timeStr.split(":").map(Number);

    const date = new Date(dateObj);
    date.setHours(hours);
    date.setMinutes(minutes);
    date.setSeconds(0);
    date.setMilliseconds(0);

    return date.toISOString();
}

// This function takes a date string in the format "DD/MM/YY_HH:MM:SS"
// and formats it for display. It splits the string into date and time parts,
// converts them into a Date object, and then formats the date to include the weekday.
// It returns a string in the format "Weekday, DD/MM/YY".
export function formatDateForDisplay(datetimeStr) {
    const [datePart, timePart] = datetimeStr.split("_");
    const [day, month, year] = datePart.split("/").map(Number);
    const [hour, minute, second] = timePart.split(":").map(Number);

    const date = new Date(2000 + year, month - 1, day, hour, minute, second);
    const options = { weekday: 'long' }; // e.g., "Thursday"
    const weekday = date.toLocaleDateString('en-US', options);

    return `${weekday}, ${datePart}`;
}

// This function takes a date string in the format "DD/MM/YY_HH:MM:SS"
// and formats the time part for display. It splits the string into date and time parts,
// converts the time part into a Date object, and then formats it to a 12-hour format.
// It returns a string in the format "HH:MM AM/PM".
export function formatTimeForDisplay(datetimeStr) {
    const [_, timePart] = datetimeStr.split("_");
    const [hour, minute] = timePart.split(":").map(Number);

    const date = new Date();
    date.setHours(hour);
    date.setMinutes(minute);

    return date.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true,
    });
}

// This function takes a date object and formats it to a string in the format "DD/MM/YY".
// It extracts the day, month, and year from the date object,
// pads the day and month with leading zeros if necessary, and returns the formatted string.
// It returns a string in the format "DD/MM/YY".
export function formatDateFromDateObject(date) {

    const dateObj = new Date(date);

    const day = String(dateObj.getDate()).padStart(2, '0');
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const year = String(dateObj.getFullYear()).slice(-2); // get last 2 digits

    return `${day}/${month}/${year}`;
}

// This function takes a date object and formats it to a string in the format "HH:MM AM/PM".
// It extracts the hours and minutes from the date object,
// and formats them to a 12-hour format with leading zeros if necessary.
export function formatTimeFromDateObject(date) {

    const dateObj = new Date(date);

    return dateObj.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true,
    });
}

// This function takes a date string in the format "DD/MM/YY" and converts it to a Date object.
// It splits the string into day, month, and year parts,
// and creates a new Date object with the specified year, month, and day.
// It returns a Date object representing the specified date.
// The year is prefixed with "20" to convert it to a full year (e.g., "23" becomes "2023").
export const parseDate = (dateStr) => {
    const [day, month, year] = dateStr.split('/');
    return new Date(`20${year}`, month - 1, day);
};

// This function takes a time string in the format "HH:MM AM/PM" and converts it to a 24-hour format.
// It splits the string into time and modifier (AM/PM) parts,
// and converts the hours to a 24-hour format based on the modifier.
// It returns a string in the format "HH:MM" representing the time in 24-hour format.
export const convertTo24Hour = (time12h) => {
    const [time, modifier] = time12h.split(' ');
    let [hours, minutes] = time.split(':');
    hours = Number(hours);

    if (modifier === 'PM' && hours !== 12) {
        hours += 12;
    }
    if (modifier === 'AM' && hours === 12) {
        hours = 0;
    }

    return `${hours}:${minutes}`;
};

// EVENT_TYPES is an array of event types used in the application.
// It includes "Merger", "Dividends", "New Capital", and "Hire".
export const EVENT_TYPES = ["Merger", "Dividends", "New Capital", "Hire"];

// GROUP_MAPPING is an object that maps each event type to a unique ID.
// It is generated by reducing the EVENT_TYPES array into an object,
// where each key is the event type and the value is its index + 1.
export const GROUP_MAPPING = EVENT_TYPES.reduce((acc, type, index) => {
    acc[type] = index + 1;
    return acc;
  }, {});
  
  // GROUPS is an array of objects representing the groups for each event type.
// Each object contains an id (index + 1) and a title (event type).
export const GROUPS = EVENT_TYPES.map((type, index) => ({
    id: index + 1,
    title: type
  }));